name: CI/CD pipeline

on:
  push:
    branches:
      - "feature/*"
      - "develop"
      - "main"
  pull_request:
    branches:
      - "feature/*"
      - "develop"
      - "main"
  workflow_dispatch:

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - ApiGateway
          - AuthenticationService
          - UserManagementService
          - ChatService
          - EurekaServer

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up environment variables
        run: |
          echo "TOKEN=${{ secrets.PAT }}" >> $GITHUB_ENV
          echo "USERNAME=${{ github.actor }}" >> $GITHUB_ENV

      - name: Run unit tests
        run: |
          cd Microservices/${{ matrix.service }}
          ./gradlew test --no-daemon

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - ApiGateway
          - AuthenticationService
          - UserManagementService
          - ChatService
          - EurekaServer

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up environment variables
        run: |
          echo "TOKEN=${{ secrets.PAT }}" >> $GITHUB_ENV
          echo "USERNAME=${{ github.actor }}" >> $GITHUB_ENV

      - name: Build with Gradle
        run: |
          cd Microservices/${{ matrix.service }}
          ./gradlew build -x test --no-daemon

      - name: login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker images
        env:
          ApiGateway: apigateway
          AuthenticationService: authservice
          UserManagementService: usermanagementservice
          ChatService: chatservice
          EurekaServer: eureka
        run: |
          cd Microservices/${{ matrix.service }}  
          docker build -t $${{ matrix.service }} .

      - name: Push Docker images to registry
        env:
          DOCKER_REGISTRY: ghcr.io
          ApiGateway: apigateway
          AuthenticationService: authservice
          UserManagementService: usermanagementservice
          ChatService: chatservice
          EurekaServer: eureka
        run: |
          docker tag $${{ matrix.service }} $DOCKER_REGISTRY/vivrish/$${{ matrix.service }}:latest
          docker push $DOCKER_REGISTRY/vivrish/$${{ matrix.service }}:latest

  integration-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Set up environment variables
        run: |
          echo "TOKEN=${{ secrets.PAT }}" >> $GITHUB_ENV
          echo "USERNAME=${{ github.actor }}" >> $GITHUB_ENV

      - name: Run integration tests
        run: |
          cd Microservices/ApiGateway
          ./gradlew integrationTest --no-daemon

  e2e-tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker images from registry
        env:
          DOCKER_REGISTRY: ghcr.io
        run: |
          docker pull $DOCKER_REGISTRY/vivrish/apigateway:latest
          docker pull $DOCKER_REGISTRY/vivrish/authservice:latest
          docker pull $DOCKER_REGISTRY/vivrish/usermanagementservice:latest
          docker pull $DOCKER_REGISTRY/vivrish/chatservice:latest 
          docker pull $DOCKER_REGISTRY/vivrish/eureka:latest

      - name: Set up environment variables
        run: |
          echo "TOKEN=${{ secrets.PAT }}" >> $GITHUB_ENV
          echo "USERNAME=${{ github.actor }}" >> $GITHUB_ENV

      - name: Run E2E tests
        run: |
          cd Microservices
          docker-compose -f docker-compose.ci.yml up -d
          sleep 30
          cd E2ETests
          ./gradlew test
          docker-compose -f docker-compose.ci.yml down
        continue-on-error: true

      - name: Capture Logs
        run: |
          mkdir -p logs/testLogs
          cp -r ./Microservices/logs/* logs/
          cp -r ./Microservices/E2ETests/logs/* logs/testLogs
          cp -r ./Microservices/E2ETests/build/reports logs/

      - name: Upload Logs
        uses: actions/upload-artifact@v3
        with:
          name: service-logs
          path: logs/
