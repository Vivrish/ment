name: CI/CD pipeline

on:
  push:
    branches:
      - feature/interservice-communication
  pull_request:
    branches:
      - feature/interservice-communication
  workflow_dispatch:

jobs:
  unit-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run unit tests
        run: |
          cd Microservices/ApiGateway
          ./gradlew test --no-daemon
          cd ../AuthenticationService
          ./gradlew test --no-daemon
          cd ../UserManagementService
          ./gradlew test --no-daemon
          cd ../ChatService
          ./gradlew test --no-daemon
          cd ../EurekaServer
          ./gradlew test --no-daemon

  build:
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: |
          cd Microservices/ApiGateway
          ./gradlew build --no-daemon
          cd ../AuthenticationService
          ./gradlew build --no-daemon
          cd ../UserManagementService
          ./gradlew build --no-daemon
          cd ../ChatService
          ./gradlew build --no-daemon
          cd ../EurekaServer
          ./gradlew build --no-daemon

      - name: login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker images
        run: |
          cd Microservices/ApiGateway
          docker build -t apigateway .
          cd ../AuthenticationService
          docker build -t authservice .
          cd ../UserManagementService
          docker build -t usermanagementservice .
          cd ../ChatService
          docker build -t chatservice .
          cd ../EurekaServer
          docker build -t eurika .

      - name: Push Docker images to registry
        env:
          DOCKER_REGISTRY: ghcr.io
        run: |
          docker tag apigateway $DOCKER_REGISTRY/vivrish/apigateway:latest
          docker tag authservice $DOCKER_REGISTRY/vivrish/authservice:latest
          docker tag usermanagementservice $DOCKER_REGISTRY/vivrish/usermanagementservice:latest
          docker tag chatservice $DOCKER_REGISTRY/vivrish/chatservice:latest
          docker tag eurika $DOCKER_REGISTRY/vivrish/eurika:latest

          docker push $DOCKER_REGISTRY/vivrish/apigateway:latest
          docker push $DOCKER_REGISTRY/vivrish/authservice:latest
          docker push $DOCKER_REGISTRY/vivrish/usermanagementservice:latest
          docker push $DOCKER_REGISTRY/vivrish/chatservice:latest 
          docker push $DOCKER_REGISTRY/vivrish/eurika:latest

  integration-tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Run integration tests
        run: |
          cd Microservices/ApiGateway
          ./gradlew integrationTest --no-daemon

  e2e-tests:
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker images from registry
        env:
          DOCKER_REGISTRY: ghcr.io
        run: |
          docker pull $DOCKER_REGISTRY/vivrish/apigateway:latest
          docker pull $DOCKER_REGISTRY/vivrish/authservice:latest
          docker pull $DOCKER_REGISTRY/vivrish/usermanagementservice:latest
          docker pull $DOCKER_REGISTRY/vivrish/chatservice:latest 
          docker pull $DOCKER_REGISTRY/vivrish/eurika:latest

      - name: Run E2E tests
        run: |
          cd Microservices
          docker-compose up
          sleep 60
          docker-compose down
