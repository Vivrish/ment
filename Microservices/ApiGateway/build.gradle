plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		name = "GitHubPackages"
		url = uri("https://maven.pkg.github.com/Vivrish/ment")
		credentials {
			username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
			password = project.findProperty("gpr.token") ?: System.getenv("TOKEN")
		}
	}
}

ext {
	set('springCloudVersion', "2023.0.3")
}

sourceSets {
	integrationTest {
		java {
			srcDir 'src/integrationTest/java'
		}
		resources {
			srcDir 'src/integrationTest/resources'
		}
		compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
		runtimeClasspath += output + compileClasspath
	}
}

dependencies {
	// Kafka

	implementation 'org.springframework.kafka:spring-kafka'

	// Jackson

	implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	// Shared DTO package
	implementation 'com.xent:dto:1.0.0-SNAPSHOT'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	// Development
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'com.h2database:h2:2.2.220'
	testImplementation 'com.xent:dto:1.0.0-SNAPSHOT'

	// Integration Test
	integrationTestImplementation 'com.h2database:h2:2.2.220'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('integrationTest', Test) {
	description = 'Runs the integration tests.'
	group = 'verification'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.named('integrationTest') {
	useJUnitPlatform()
}

tasks.named('processIntegrationTestResources') {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
